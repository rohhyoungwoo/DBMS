-- 계정명 : test01
-- 비밀번호 : 1234
-- 권한 create session, create table, create view, resource;

-- 계정 만들고 a1~a4 테이블 등록 후 문제 풀기
GRANT CREATE SESSION TO TEST01; 

/* 1. JOBS 테이블에서 JOB_ID로 직원들의 JOB_TITLE, EMAIL, 성, 이름 조회 */
SELECT * FROM JOBS;
SELECT * FROM JOB_HISTORY;
SELECT * FROM EMPLOYEES;

SELECT count(*) FROM jobs;
SELECT count(*) FROM EMPLOYEES e ;

--SELECT JOB_ID 아이디, JOB_TITLE 타이틀, EAMAIL 이메일, FIRET_NAME 성, LAST_NAME 이름
--FROM EMPLOYEES;

SELECT J.JOB_ID 아이디 , J.JOB_TITLE 타이틀 , E.EMAIL 이메일, E.FIRST_NAME 성, E.LAST_NAME 이름
FROM JOBS j JOIN EMPLOYEES e
ON J.JOB_ID = E.JOB_ID;
	
	
/* 2. EMPLOYEES 테이블에서 HIREDATE가 2003~2004년까지인 사원의 정보와 부서명 검색 */
SELECT * FROM EMPLOYEES;
SELECT * FROM DEPARTMENTS;
SELECT count(*) FROM EMPLOYEES e ; -- 107행
SELECT count(*) FROM DEPARTMENTS d ; -- 27행

-- E.FIRST_NAME, E.LAST_NAME, E.HIRE_DATE, D.DEPARTMENT_NAME 
SELECT E.DEPARTMENT_ID, E.HIRE_DATE, E.FIRST_NAME, E.LAST_NAME, E.EMAIL, D.DEPARTMENT_NAME 
FROM EMPLOYEES e JOIN
	(SELECT D.DEPARTMENT_ID, D.DEPARTMENT_NAME FROM DEPARTMENTS d) D
	ON E.DEPARTMENT_ID = D.DEPARTMENT_ID
WHERE HIRE_DATE BETWEEN '2000-01-01' AND '2001-12-31';

SELECT e.FIRST_name || ' ' || e.last_name 이름, e.hire_date 입사일, d.department_name 부서명
FROM DEPARTMENTS d JOIN EMPLOYEES e
ON d.DEPARTMENT_ID = e.DEPARTMENT_ID AND e.HIRE_DATE BETWEEN '2000-01-01' AND '2001-12-31';






/* 3. EMP 테이블에서 ENAME에 L이 있는 사원들의 DNAME과 LOC 검색 */
SELECT * FROM EMP e ;
SELECT * FROM DEPT d ;
SELECT E.ENAME, D.DNAME, D.LOC
FROM EMP E JOIN (SELECT D.DEPTNO, D.DNAME, D.LOC FROM DEPT D) D
	ON E.DEPTNO = D.DEPTNO	
WHERE E.ENAME LIKE '%L%';

/* 4. SCHEDULE 테이블에서 경기 일정이 20120501 ~ 20120502 사이에 있는 경기장 전체 정보 조회 */
SELECT * FROM SCHEDULE s ;
SELECT * FROM STADIUM ST ;

SELECT STADIUM_ID, SCHE_DATE, GUBUN, HOMETEAM_ID, AWAYTEAM_ID, HOME_SCORE, AWAY_SCORE
FROM SCHEDULE s 
WHERE SCHE_DATE BETWEEN 20120501 AND 20120502;

SELECT S.STADIUM_ID, S.SCHE_DATE, ST.HOMETEAM_ID, ST.SEAT_COUNT, ST.ADDRESS, ST.DDD, ST.TEL
FROM STADIUM ST JOIN SCHEDULE S
ON S.STADIUM_ID = ST.STADIUM_ID AND S.SCHE_DATE >= '20120501' AND S.SCHE_DATE <= '20120502';
-- ON S.SALARY = (D.DEPARTMENT_ID > 10) ; ON절에서 테이블간 적절한 관계를 만들지 못하는 경우는 사용 불가능


/* 5. 축구 선수들 중에서 각 팀 별로 키가 가장 큰 선수들의 전체 정보 조회 */
/* 위 문제를 JOIN없이 풀기
 * (A,B) IN (C, D) : A = C AND B = D */
SELECT * FROM PLAYER p ;
SELECT * FROM TEAM t ;
-- JOIN없이
SELECT * FROM PLAYER P
WHERE (P.TEAM_ID, HEIGHT) IN (SELECT TEAM_ID, MAX(HEIGHT) 
	FROM PLAYER p2
	GROUP BY TEAM_ID) ;

--가장 키가 큰 선수
SELECT TEAM_ID , max(HEIGHT)
FROM PLAYER p
GROUP BY TEAM_ID
ORDER BY TEAM_ID ;

--합체
SELECT TEAM_ID 
FROM PLAYER p 
GROUP BY TEAM_ID
ORDER BY TEAM_ID);

/* 6. EMP 테이블의 SAL을 이용, SALGRAED 테이블을 참고하여 모든 사원의 정보를 GRADE를 포함하여 조회 */
SELECT * FROM EMP e ;
SELECT * FROM SALGRADE s ;

-- JOIN 테이블 합치기 
-- 등급별 최저 LOSAL, 최고 HISAL 사이에 있는 SAL을 조건으로 건다
-- SLA >= LOSAL AND SAL <= HISAL
SELECT * FROM EMP E JOIN SALGRADE s 
ON E.SAL >= S.LOSAL AND E.SAL <= S.HISAL;
-- 다른 방법
SELECT * FROM EMP E JOIN SALGRADE s 
ON E.SAL BETWEEN S.LOSAL AND S.HISAL ;
/* 7. EMP 테이블에서 각 사원의 매니저 이름 조회 */
-- EMP 테이블을 확인한다
SELECT * FROM EMP;
-- MGR이 매니저 번호인 것을 알아챈다
-- 셀프조인 사용한다

SELECT E1.EMPNO 사원번호, E1.ENAME 사원이름, E2.ENAME 매니저이름, E1.MGR 매니저번호
FROM EMP E1 JOIN EMP E2
ON E1.MGR = E2.EMPNO;

/* 8. 축구 선수들 중에서 각 팀 별로 키가 가장 큰 선수들의 전체 정보 조회 */
-- 팀별로 그룹화 후 팀의 가장 큰 키를 찾기
SELECT TEAM_ID , max(HEIGHT)
FROM PLAYER p
GROUP BY TEAM_ID;

-- HEIGHT, TEAM_ID 가 일치하는 조건으로 PLAYER 테이블과  JOIN
SELECT *
FROM (SELECT TEAM_ID , max(HEIGHT) HEIGHT 
FROM PLAYER
GROUP BY TEAM_ID) P1 JOIN PLAYER p2 
ON P1.TEAM_ID = P2.TEAM_ID AND P1.HEIGHT = P2.HEIGHT;


